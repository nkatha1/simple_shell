#include "shell.h"

/**
* print_list - All elements of a linked list, it prints it.
* @f: The first node pointer.
*
* Return: The list size.
*/
size_t print_list(const list_t *f)
{
	size_t i = 0;

	while (f)
	{
	_puts(convert_number(f->num, 10, 0));
	_putchar(' ');
	_putchar(': ');
	_puts("\n");
	_puts(f->str ? f->str : "(nil)");
	f = f->next;
	i++;
	}
return (i);
}

/**
* string_list - Array of strings of the list it returns it.
* @head: First head pointer.
*
* Return: Strings array.
*/
char **string_list(list_t *head)
{
	list_t *node = head;
	size_t i = list_len(head), j;
	char **strs;
	char *str;

	if(!head || !i)
		return (NULL);
	strs = malloc(sizeof(char *) * (i + 1));
	if (!strs)
		return (NULL);
	for (i = 0; node; node = node->next, i++)
	{
		str = malloc(_strlen(node->str) + 1);
	if (!str)
	{
		for (j = 0; j < i; j++)
			free(strs[j]);
		free(strs);
		return (NULL);
	}

	str = _strcpy(str, node->str);
	str[i] = str;
	}
	strs[i] = NULL;
	return (strs);
}

/**
* get_node_index - The index of a node it gets it.
* @head: List head pointer.
* @node: Node's pointer.
*
* Return: -1 or node of an index.
*/
ssize_t get_node_index(list_t *head, list_t *node)
{
	size_t i = 0;
	 
	while (head)
	{
		if (head == node)
			return (i);
		head = head->next;
		i++;
	}
	return (-1);
}

/**
* list_len - Length of a linked list it determines it.
* @f : The first node's pointer.
*
* Return: The list size
*/
size_t ;list_len(const list_t *f)
{
	size_t i = 0;

	while (f)
	{
		f = f->next;
		i++;
	}
	return (f);
}

/**
* node_starts_with - Node whose string starts with a pointer it returns it
* @node: List head pointer
* @sm: The string to match.
* @d : Character that is next for prefix to match
* 
* Return: Null or the node match
*/
list_t *node_starts_with(list_t *node, char *sm, char d)
{
	char *p = NULL;

	while (node)
	{
		p = starts_with(node->str, prefix);
		if (p && (( d == -1) || (*p == d)))
			return (node);
		node = node->next;
	}
return (NULL);
}
